/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef YARNTetrischedService_H
#define YARNTetrischedService_H

#include <thrift/TDispatchProcessor.h>
#include "tetrisched_types.h"

namespace alsched {

class YARNTetrischedServiceIf {
 public:
  virtual ~YARNTetrischedServiceIf() {}
  virtual void AllocResources(const JobID jobId, const std::set<int32_t> & machines) = 0;
};

class YARNTetrischedServiceIfFactory {
 public:
  typedef YARNTetrischedServiceIf Handler;

  virtual ~YARNTetrischedServiceIfFactory() {}

  virtual YARNTetrischedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(YARNTetrischedServiceIf* /* handler */) = 0;
};

class YARNTetrischedServiceIfSingletonFactory : virtual public YARNTetrischedServiceIfFactory {
 public:
  YARNTetrischedServiceIfSingletonFactory(const boost::shared_ptr<YARNTetrischedServiceIf>& iface) : iface_(iface) {}
  virtual ~YARNTetrischedServiceIfSingletonFactory() {}

  virtual YARNTetrischedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(YARNTetrischedServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<YARNTetrischedServiceIf> iface_;
};

class YARNTetrischedServiceNull : virtual public YARNTetrischedServiceIf {
 public:
  virtual ~YARNTetrischedServiceNull() {}
  void AllocResources(const JobID /* jobId */, const std::set<int32_t> & /* machines */) {
    return;
  }
};

typedef struct _YARNTetrischedService_AllocResources_args__isset {
  _YARNTetrischedService_AllocResources_args__isset() : jobId(false), machines(false) {}
  bool jobId;
  bool machines;
} _YARNTetrischedService_AllocResources_args__isset;

class YARNTetrischedService_AllocResources_args {
 public:

  YARNTetrischedService_AllocResources_args() : jobId(0) {
  }

  virtual ~YARNTetrischedService_AllocResources_args() throw() {}

  JobID jobId;
  std::set<int32_t>  machines;

  _YARNTetrischedService_AllocResources_args__isset __isset;

  void __set_jobId(const JobID val) {
    jobId = val;
  }

  void __set_machines(const std::set<int32_t> & val) {
    machines = val;
  }

  bool operator == (const YARNTetrischedService_AllocResources_args & rhs) const
  {
    if (!(jobId == rhs.jobId))
      return false;
    if (!(machines == rhs.machines))
      return false;
    return true;
  }
  bool operator != (const YARNTetrischedService_AllocResources_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const YARNTetrischedService_AllocResources_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class YARNTetrischedService_AllocResources_pargs {
 public:


  virtual ~YARNTetrischedService_AllocResources_pargs() throw() {}

  const JobID* jobId;
  const std::set<int32_t> * machines;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class YARNTetrischedService_AllocResources_result {
 public:

  YARNTetrischedService_AllocResources_result() {
  }

  virtual ~YARNTetrischedService_AllocResources_result() throw() {}


  bool operator == (const YARNTetrischedService_AllocResources_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const YARNTetrischedService_AllocResources_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const YARNTetrischedService_AllocResources_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class YARNTetrischedService_AllocResources_presult {
 public:


  virtual ~YARNTetrischedService_AllocResources_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class YARNTetrischedServiceClient : virtual public YARNTetrischedServiceIf {
 public:
  YARNTetrischedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  YARNTetrischedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AllocResources(const JobID jobId, const std::set<int32_t> & machines);
  void send_AllocResources(const JobID jobId, const std::set<int32_t> & machines);
  void recv_AllocResources();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class YARNTetrischedServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<YARNTetrischedServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (YARNTetrischedServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AllocResources(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  YARNTetrischedServiceProcessor(boost::shared_ptr<YARNTetrischedServiceIf> iface) :
    iface_(iface) {
    processMap_["AllocResources"] = &YARNTetrischedServiceProcessor::process_AllocResources;
  }

  virtual ~YARNTetrischedServiceProcessor() {}
};

class YARNTetrischedServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  YARNTetrischedServiceProcessorFactory(const ::boost::shared_ptr< YARNTetrischedServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< YARNTetrischedServiceIfFactory > handlerFactory_;
};

class YARNTetrischedServiceMultiface : virtual public YARNTetrischedServiceIf {
 public:
  YARNTetrischedServiceMultiface(std::vector<boost::shared_ptr<YARNTetrischedServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~YARNTetrischedServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<YARNTetrischedServiceIf> > ifaces_;
  YARNTetrischedServiceMultiface() {}
  void add(boost::shared_ptr<YARNTetrischedServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AllocResources(const JobID jobId, const std::set<int32_t> & machines) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AllocResources(jobId, machines);
    }
    ifaces_[i]->AllocResources(jobId, machines);
  }

};

} // namespace

#endif
