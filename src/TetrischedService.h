/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TetrischedService_H
#define TetrischedService_H

#include <thrift/TDispatchProcessor.h>
#include "tetrisched_types.h"

namespace alsched {

class TetrischedServiceIf {
 public:
  virtual ~TetrischedServiceIf() {}
  virtual void AddJob(const JobID jobId, const job_t::type jobType, const int32_t k, const int32_t priority, const double duration, const double slowDuration) = 0;
  virtual void FreeResources(const std::set<int32_t> & machines) = 0;
};

class TetrischedServiceIfFactory {
 public:
  typedef TetrischedServiceIf Handler;

  virtual ~TetrischedServiceIfFactory() {}

  virtual TetrischedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TetrischedServiceIf* /* handler */) = 0;
};

class TetrischedServiceIfSingletonFactory : virtual public TetrischedServiceIfFactory {
 public:
  TetrischedServiceIfSingletonFactory(const boost::shared_ptr<TetrischedServiceIf>& iface) : iface_(iface) {}
  virtual ~TetrischedServiceIfSingletonFactory() {}

  virtual TetrischedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TetrischedServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TetrischedServiceIf> iface_;
};

class TetrischedServiceNull : virtual public TetrischedServiceIf {
 public:
  virtual ~TetrischedServiceNull() {}
  void AddJob(const JobID /* jobId */, const job_t::type /* jobType */, const int32_t /* k */, const int32_t /* priority */, const double /* duration */, const double /* slowDuration */) {
    return;
  }
  void FreeResources(const std::set<int32_t> & /* machines */) {
    return;
  }
};

typedef struct _TetrischedService_AddJob_args__isset {
  _TetrischedService_AddJob_args__isset() : jobId(false), jobType(false), k(false), priority(false), duration(false), slowDuration(false) {}
  bool jobId;
  bool jobType;
  bool k;
  bool priority;
  bool duration;
  bool slowDuration;
} _TetrischedService_AddJob_args__isset;

class TetrischedService_AddJob_args {
 public:

  TetrischedService_AddJob_args() : jobId(0), jobType((job_t::type)0), k(0), priority(0), duration(0), slowDuration(0) {
  }

  virtual ~TetrischedService_AddJob_args() throw() {}

  JobID jobId;
  job_t::type jobType;
  int32_t k;
  int32_t priority;
  double duration;
  double slowDuration;

  _TetrischedService_AddJob_args__isset __isset;

  void __set_jobId(const JobID val) {
    jobId = val;
  }

  void __set_jobType(const job_t::type val) {
    jobType = val;
  }

  void __set_k(const int32_t val) {
    k = val;
  }

  void __set_priority(const int32_t val) {
    priority = val;
  }

  void __set_duration(const double val) {
    duration = val;
  }

  void __set_slowDuration(const double val) {
    slowDuration = val;
  }

  bool operator == (const TetrischedService_AddJob_args & rhs) const
  {
    if (!(jobId == rhs.jobId))
      return false;
    if (!(jobType == rhs.jobType))
      return false;
    if (!(k == rhs.k))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(duration == rhs.duration))
      return false;
    if (!(slowDuration == rhs.slowDuration))
      return false;
    return true;
  }
  bool operator != (const TetrischedService_AddJob_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TetrischedService_AddJob_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TetrischedService_AddJob_pargs {
 public:


  virtual ~TetrischedService_AddJob_pargs() throw() {}

  const JobID* jobId;
  const job_t::type* jobType;
  const int32_t* k;
  const int32_t* priority;
  const double* duration;
  const double* slowDuration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TetrischedService_AddJob_result {
 public:

  TetrischedService_AddJob_result() {
  }

  virtual ~TetrischedService_AddJob_result() throw() {}


  bool operator == (const TetrischedService_AddJob_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TetrischedService_AddJob_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TetrischedService_AddJob_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TetrischedService_AddJob_presult {
 public:


  virtual ~TetrischedService_AddJob_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TetrischedService_FreeResources_args__isset {
  _TetrischedService_FreeResources_args__isset() : machines(false) {}
  bool machines;
} _TetrischedService_FreeResources_args__isset;

class TetrischedService_FreeResources_args {
 public:

  TetrischedService_FreeResources_args() {
  }

  virtual ~TetrischedService_FreeResources_args() throw() {}

  std::set<int32_t>  machines;

  _TetrischedService_FreeResources_args__isset __isset;

  void __set_machines(const std::set<int32_t> & val) {
    machines = val;
  }

  bool operator == (const TetrischedService_FreeResources_args & rhs) const
  {
    if (!(machines == rhs.machines))
      return false;
    return true;
  }
  bool operator != (const TetrischedService_FreeResources_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TetrischedService_FreeResources_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TetrischedService_FreeResources_pargs {
 public:


  virtual ~TetrischedService_FreeResources_pargs() throw() {}

  const std::set<int32_t> * machines;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TetrischedService_FreeResources_result {
 public:

  TetrischedService_FreeResources_result() {
  }

  virtual ~TetrischedService_FreeResources_result() throw() {}


  bool operator == (const TetrischedService_FreeResources_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TetrischedService_FreeResources_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TetrischedService_FreeResources_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TetrischedService_FreeResources_presult {
 public:


  virtual ~TetrischedService_FreeResources_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TetrischedServiceClient : virtual public TetrischedServiceIf {
 public:
  TetrischedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TetrischedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AddJob(const JobID jobId, const job_t::type jobType, const int32_t k, const int32_t priority, const double duration, const double slowDuration);
  void send_AddJob(const JobID jobId, const job_t::type jobType, const int32_t k, const int32_t priority, const double duration, const double slowDuration);
  void recv_AddJob();
  void FreeResources(const std::set<int32_t> & machines);
  void send_FreeResources(const std::set<int32_t> & machines);
  void recv_FreeResources();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TetrischedServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TetrischedServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TetrischedServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AddJob(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FreeResources(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TetrischedServiceProcessor(boost::shared_ptr<TetrischedServiceIf> iface) :
    iface_(iface) {
    processMap_["AddJob"] = &TetrischedServiceProcessor::process_AddJob;
    processMap_["FreeResources"] = &TetrischedServiceProcessor::process_FreeResources;
  }

  virtual ~TetrischedServiceProcessor() {}
};

class TetrischedServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TetrischedServiceProcessorFactory(const ::boost::shared_ptr< TetrischedServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TetrischedServiceIfFactory > handlerFactory_;
};

class TetrischedServiceMultiface : virtual public TetrischedServiceIf {
 public:
  TetrischedServiceMultiface(std::vector<boost::shared_ptr<TetrischedServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TetrischedServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TetrischedServiceIf> > ifaces_;
  TetrischedServiceMultiface() {}
  void add(boost::shared_ptr<TetrischedServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AddJob(const JobID jobId, const job_t::type jobType, const int32_t k, const int32_t priority, const double duration, const double slowDuration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddJob(jobId, jobType, k, priority, duration, slowDuration);
    }
    ifaces_[i]->AddJob(jobId, jobType, k, priority, duration, slowDuration);
  }

  void FreeResources(const std::set<int32_t> & machines) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FreeResources(machines);
    }
    ifaces_[i]->FreeResources(machines);
  }

};

} // namespace

#endif
