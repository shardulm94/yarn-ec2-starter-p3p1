// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TetrischedService.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::alsched;

class TetrischedServiceHandler : virtual public TetrischedServiceIf {
 public:
  TetrischedServiceHandler() {
    // Your initialization goes here
  }

  void AddJob(const JobID jobId, const job_t::type jobType, const int32_t k, const int32_t priority, const double duration, const double slowDuration) {
    // Your implementation goes here
    printf("AddJob\n");
  }

  void FreeResources(const std::set<int32_t> & machines) {
    // Your implementation goes here
    printf("FreeResources\n");
  }

};

int main(int argc, char **argv) {
  const int port = 9091;
  boost::shared_ptr<TetrischedServiceHandler> handler(new TetrischedServiceHandler());
  boost::shared_ptr<TProcessor> processor(new TetrischedServiceProcessor(handler));
  boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
